" -----------------------------------------
" |           VIM CONFIGURATION           |
" -----------------------------------------

" -----------------------------------------
" - std configuration -
" -----------------------------------------
syntax on
set laststatus=2
set incsearch
set scrolloff=8
set splitbelow splitright
set showtabline=2
set indentkeys-=0#
filetype plugin on
set expandtab shiftwidth=4 tabstop=4 softtabstop=4
set colorcolumn=80
sign define marksign text=● linehl=DiffAdd texthl=String
sign define marksignGreen text=● linehl=DiffAdd texthl=String
sign define marksignYellow text=● linehl=DiffChange texthl=Todo
sign define marksignOrange text=● linehl=LightlineLeft_normal_tabsel texthl=Ctrlp
sign define marksignRed text=● linehl=DiffDelete texthl=ALEErrorSign


" -----------------------------------------
" - key mapping -
" -----------------------------------------
" leader
let mapleader = " "

" save & quit 
nnoremap :s :update<cr>
nnoremap :q :q<cr>
nnoremap <leader>qq :q!<cr>
nnoremap <leader>qa :qa!<cr>

" utils 
nnoremap <leader>b :bn<cr>
nnoremap <leader>l :ls<cr>
nnoremap <leader>c :wincmd c<cr>
nnoremap <leader>n :set number!<cr>
nnoremap <leader>N :call Notes()<cr>
nnoremap <leader>h :sp<cr>
nnoremap <leader>v :vsp<cr>
nnoremap <leader>w :wincmd w<cr>
nnoremap <leader>t :tabnew<cr>
nnoremap <leader>s :set hlsearch<cr> *bN
nnoremap <leader>S :set hlsearch!<cr>  
nnoremap <leader>f :<C-f>k
nnoremap gm 'm
nnoremap m :call SetDebugPoint()<CR>
nnoremap M :call DelDebugPoint()<CR>
nnoremap tg gT
nnoremap <C-l> gt
nnoremap <C-h> gT
nnoremap ù %
vnoremap ù %
nnoremap <leader>r qr
nnoremap <leader>R q
nnoremap <leader>à @r
vnoremap <leader>à :normal @r<cr>
nnoremap "" yi"
nnoremap (( yi(
nnoremap ye vg_y$
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv
nnoremap <C-j> 20j
nnoremap <C-k> 20k
vnoremap e g_
vnoremap f ^

nnoremap :t :NERDTreeToggle<cr>

nnoremap <F7> :%!python -mjson.tool<cr>

" insert new line out of insert mode 
" nnoremap m o<ESC>k
 

" map esc key 
imap kj <ESC>l

" go to the first non-blank character in a line
nnoremap F ^
" go to the last non-blank character in a line
nnoremap E $

" auto closing brackets 
inoremap " ""<left>
inoremap ' ''<left>
inoremap ` ``<left>
inoremap ( ()<left>
inoremap (<CR> (<CR>)<ESC>O
inoremap [ []<left>
inoremap { {}<left>
inoremap {<CR> {<CR>}<ESC>O
inoremap {;<CR> {<CR>};<ESC>O
inoremap /*<CR> /*<CR>*/<ESC>O

" disable recording
map q <Nop>

vnoremap p "_dP

" -----------------------------------------
" - pluggins -
" -----------------------------------------
call plug#begin('~/.vim/plugged')
Plug 'junegunn/goyo.vim'
Plug 'tpope/vim-commentary'
Plug 'mzlogin/vim-markdown-toc'
Plug 'itchyny/lightline.vim'
Plug 'scrooloose/nerdtree'
Plug 'kien/ctrlp.vim'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-surround'
Plug 'fatih/vim-go'
Plug 'chriskempson/base16-vim'
Plug 'arcticicestudio/nord-vim'
Plug 'rust-lang/rust.vim'
call plug#end()

" -----------------------------------------
" - special settings -
" -----------------------------------------
" set line numbers 
set number

" vim-go
let g:go_template_use_pkg = 1
let g:go_highlight_functions = 1
" let g:go_highlight_function_calls = 1

" ctrlp 
let g:ctrlp_working_path_mode = 0
let g:ctrlp_use_caching = 0
nnoremap <silent> <C-b> :CtrlPBuffer<CR>
let g:ctrlp_prompt_mappings = {
    \ 'PrtHistory(-1)':       ['<c-t>'],
    \ 'AcceptSelection("t")': ['<c-n>'],
    \ }

" multiple cursor
let g:multi_cursor_exit_from_insert_mode = 1
let g:multi_cursor_exit_from_visual_mode = 1
let g:multi_cursor_select_all_word_key = '<C-a>'
let g:multi_cursor_quit_key='<C-k>'

" vim-fugitive
nnoremap <leader>gs :G<CR>
nnoremap <leader>gc :Git commit<CR>
nnoremap <leader>gl :Git log<CR>
nnoremap <leader>gk :diffget //3<CR>
nnoremap <leader>gj :diffget //2<CR>

" Goyo
let g:goyo_width = 120

" -----------------------------------------
" - file init -
" -----------------------------------------
" bash
autocmd BufNewFile *.sh 0r ~/.vim/templates/template.sh | :2
function BashTemp()
   :read ~/.vim/templates/template.sh
endfunction

" python
autocmd BufNewFile *.py 0r ~/.vim/templates/template.py | :2
function PyTemp()
   :read ~/.vim/templates/template.py
endfunction

" json
autocmd BufRead,BufNewFile *.json set cursorline!

function Json()
	:silent! %s/None/null/g
	:silent! %s/True/true/g
	:silent! %s/False/false/g
	:silent! %s/'/"/g
	:silent! %!python -mjson.tool
endfunction

" flask template
function FlaskTemp()
   :1,$d
   :read ~/.vim/templates/flask_template.py
endfunction

" fastapi template
function FastAPITemp()
   :1,$d
   :read ~/.vim/templates/fastapi_template.py
endfunction

" fastapi template
function SocketTemp()
   :1,$d
   :read ~/.vim/templates/socket_template.py
endfunction

" clean 
function Clear()
   :1,$d
endfunction

" -----------------------------------------
" - utils -
" -----------------------------------------
" find and replace all  
function FindAndReplaceAll(source, target)
    exe silent! '%s/' . a:source . '/' . a:target . '/g'
endfunction

" notes
function VimReminder()
" :silent! mkdir -p /tmp/notes && touch /tmp/notes/notes.md
" :tabnew /tmp/notes/notes.md
  :tabnew ~/.vim/templates/reminder.md
endfunction

" -----------------------------------------
" - Debugger -
" -----------------------------------------
autocmd BufEnter * call RetrieveDebugPoint()

function SetDebugPoint()
    " Store current cursor line"
    let cursor = getpos(".")
    " Clear previous debug"
    call DelDebugPoint()
    " Back to cursor line 
    call setpos(".", cursor)
    " Set debug point 
    mark m
    silent! exec 'sign place '.line(".").' line='.line(".").' name=marksignOrange file=' . expand("%:p")
endfunc

function DelDebugPoint()
    silent! 'm
    silent! exec 'sign unplace '.line(".")
    silent! delmark m
endfunc

function RetrieveDebugPoint()
    try  
        'm
        silent! exec 'sign place '.line(".").' line='.line(".").' name=marksign file=' . expand("%:p")
    catch
    finally 
        :1
    endtry 
endfunc

function GotoLine(line)
     execute a:line
endfunction

" -----------------------------------------
" - theme -
" -----------------------------------------
" custom
set termguicolors
set t_Co=256
set cursorline
colorscheme nord
let g:lightline = {'colorscheme': 'custom_nord',}
set background=dark


" colorscheme base16-tomorrow
" let g:lightline = {'colorscheme': 'Tomorrow',}
" set background=dark

" show hi groups : 
" so $VIMRUNTIME/syntax/hitest.vim
"
