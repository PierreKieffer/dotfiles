""""""""""""""""""""" 
" VIM CONFIGURATION "
"""""""""""""""""""""

"""""""""""""""""""""""""
""""std configuration""""

syntax on
set smartindent
set incsearch

"""""""""""""""""""""
""""key mapping""""

" save & quit 
let mapleader = " "
nnoremap :s :update<cr>
nnoremap :q :q<cr>
nnoremap <leader>qq :q!<cr>


" utils 
nnoremap :t :NERDTreeToggle<cr>
nnoremap <leader>n :set number!<cr>
nnoremap <leader>h :sp<cr>
nnoremap <leader>v :vsp<cr>
nnoremap <leader>w :wincmd w<cr>
nnoremap <leader>t :tabnew<cr>

" nnoremap <F4> :set list!<cr> :hi SpecialKey ctermfg=grey guifg=grey54 <cr>
" nnoremap <F3> :IndentLinesToggle <cr>
nnoremap <F7> :%!python -mjson.tool<cr>

" insert new line out of insert mode 
nnoremap m o<ESC>k

" map esc key 
imap kj <ESC>l

" go to the first non-blank character in a line
nnoremap à ^

" auto closing brackets 
inoremap " ""<left>
inoremap ' ''<left>
inoremap ( ()<left>
inoremap (<CR> (<CR>)<ESC>O
inoremap [ []<left>
inoremap { {}<left>
inoremap {<CR> {<CR>}<ESC>O
inoremap {;<CR> {<CR>};<ESC>O
inoremap /*<CR> /*<CR>*/<ESC>O

" disable recording
map q <Nop>

"""""""""""""""""""""
""""pluggins""""

call plug#begin('~/.vim/plugged')
Plug 'chrisbra/vim-commentary'
Plug 'mzlogin/vim-markdown-toc'
Plug 'itchyny/lightline.vim'
Plug 'scrooloose/nerdtree'
Plug 'kien/ctrlp.vim'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-surround'
Plug 'fatih/vim-go'
" Plug 'Yggdroot/indentLine'
" Plug 'ayu-theme/ayu-vim'
Plug 'chriskempson/base16-vim'
call plug#end()


"""""""""""""""""""""
""""special settings""""

" cmd line height
" set cmdheight=1

" set line numbers 
set number

" special caract settings + indent lines guides for vim-go 
" last caracter is a space
" set list lcs=tab:\|\
" set list!

" indent line 
let g:indentLine_enabled = 0
let g:indentLine_color_term = 252

" vim-go
let g:go_template_use_pkg = 1

" ctrlp 
let g:ctrlp_working_path_mode = 0
let g:ctrlp_use_caching = 0
" map cr to open in vertical split
" let g:ctrlp_prompt_mappings = {
"    \ 'AcceptSelection("e")': ['<c-v>', '<2-LeftMouse>'],
"    \ 'AcceptSelection("v")': ['<cr>', '<RightMouse>'],
"    \ }

" multiple cursor
let g:multi_cursor_exit_from_insert_mode = 1
let g:multi_cursor_exit_from_visual_mode = 1
let g:multi_cursor_select_all_word_key = '<C-a>'
let g:multi_cursor_quit_key='<C-k>'

"""""""""""""""""""""
""""file init""""
" bash
" autocmd BufNewFile *.sh 0put =\"#!/bin/bash\<nl>\"|$
autocmd BufNewFile *.sh 0r ~/.vim/templates/template.sh | :2
function BashTemp()
   :read ~/.vim/templates/template.sh
endfunction

" python
autocmd BufNewFile *.py 0r ~/.vim/templates/template.py | :2
function PyTemp()
   :read ~/.vim/templates/template.py
endfunction

" flask template
function FlaskTemp()
   :1,$d
   :read ~/.vim/templates/flask_template.py
endfunction

" fastapi template
function FastAPITemp()
   :1,$d
   :read ~/.vim/templates/fastapi_template.py
endfunction

" clean 
function Clear()
   :1,$d
endfunction

"""""""""""""""""""""
""""status bar""""

set laststatus=2


"""""""""""""""""""""
""""theme settings""""

" base16 custom
set termguicolors
" colorscheme base16-materia
colorscheme base16-tomorrow-night
set cursorline
let g:lightline = {'colorscheme': 'Tomorrow_Night',}

" ayu
" set termguicolors
" let ayucolor="mirage"
" colorscheme ayu
" let g:lightline = {'colorscheme': 'wombat',}
" let g:lightline = {'colorscheme': 'ayu',}
" set cursorline
" set fillchars+=vert:\▏

" onehalf
" set termguicolors
" set cursorline
" colorscheme onehalflight
" colorscheme onehalfdark
" let g:lightline = { 'colorscheme': 'onehalfdark' }
