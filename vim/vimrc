" ===========================================
" VIM CONFIGURATION
" ===========================================

" ===========================================
" BASIC SETTINGS
" ===========================================
syntax on
set laststatus=2
set incsearch
set scrolloff=8
set splitbelow splitright
set showtabline=2
set indentkeys-=0#
filetype plugin on
set expandtab shiftwidth=4 tabstop=4 softtabstop=4
set colorcolumn=80
set tabpagemax=100
set wildmenu
set wildmode=longest:full,full
set wildoptions=pum
set number

" ===========================================
" PLUGINS
" ===========================================
call plug#begin('~/.vim/plugged')
Plug 'dense-analysis/ale'
Plug 'tpope/vim-commentary'
Plug 'mzlogin/vim-markdown-toc'
Plug 'itchyny/lightline.vim'
Plug 'scrooloose/nerdtree'
Plug 'kien/ctrlp.vim'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-surround'
Plug 'fatih/vim-go'
Plug 'arcticicestudio/nord-vim'
Plug 'NLKNguyen/papercolor-theme'
call plug#end()

" ===========================================
" PLUGIN CONFIGURATION
" ===========================================

" vim-go
let g:go_template_use_pkg = 1
let g:go_highlight_functions = 1
" let g:go_highlight_function_calls = 1

" ctrlp 
let g:ctrlp_working_path_mode = 0
let g:ctrlp_use_caching = 0
let g:ctrlp_prompt_mappings = {
    \ 'PrtHistory(-1)':       ['<c-t>'],
    \ 'AcceptSelection("t")': ['<c-n>'],
    \ }

" multiple cursor
let g:multi_cursor_exit_from_insert_mode = 1
let g:multi_cursor_exit_from_visual_mode = 1
let g:multi_cursor_select_all_word_key = '<C-a>'
let g:multi_cursor_quit_key='<C-k>'

" lightline
let g:lightline = {'colorscheme': 'nord',}

" ===========================================
" KEYMAPPINGS
" ===========================================

" Leader key
let mapleader = " "

" Save & quit mappings
nnoremap :s :update<cr>
nnoremap :q :q<cr>
nnoremap <leader>qq :q!<cr>
nnoremap <leader>qa :qa!<cr>

" Navigation mappings
nnoremap <leader>b :bn<cr>
nnoremap <leader>w :wincmd w<cr>
nnoremap <leader>t :tabnew<cr>
nnoremap tg gT
nnoremap <C-l> gt
nnoremap <C-h> gT
nnoremap <C-j> 20j
nnoremap <C-k> 20k
nnoremap L e
nnoremap H b
nnoremap F ^
nnoremap E $

" Window & split mappings
nnoremap <leader>c :wincmd c<cr>
nnoremap <leader>h :sp<cr>
nnoremap <leader>v :vsp<cr>

" Utility mappings
nnoremap <leader>n :set number!<cr>
nnoremap <leader>N :call Notes()<cr>
nnoremap <leader>s :set hlsearch<cr> *bN
nnoremap <leader>S :set hlsearch!<cr>  
nnoremap <leader>f :<C-f>k
nnoremap ù %
vnoremap ù %

" Recording & macro mappings
nnoremap <leader>r qr
nnoremap <leader>R q
nnoremap <leader>à @r
vnoremap <leader>à :normal @r<cr>
map q <Nop>

" Text object mappings
nnoremap "" yi"
nnoremap (( yi(
nnoremap ye vg_y$

" Visual mode mappings
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv
vnoremap e g_
vnoremap f ^
vnoremap <leader>c "+y
vnoremap p "_dP

" Insert mode mappings
imap kj <ESC>l

" Auto closing brackets 
inoremap " ""<left>
inoremap ' ''<left>
inoremap ` ``<left>
inoremap ( ()<left>
inoremap (<CR> (<CR>)<ESC>O
inoremap [ []<left>
inoremap { {}<left>
inoremap {<CR> {<CR>}<ESC>O
inoremap {;<CR> {<CR>};<ESC>O
inoremap /*<CR> /*<CR>*/<ESC>O

" Plugin-specific mappings
nnoremap :t :NERDTreeToggle<cr>
nnoremap <silent> <C-b> :CtrlPBuffer<CR>
xnoremap <silent> <Leader>g "zy:call Search(@z, expand('%:e'))<CR>
nnoremap <silent> <Leader>g :set hlsearch<CR>*bN:call Search(expand("<cword>"), expand('%:e'))<CR>
vnoremap <Leader>h :call HighlightSelectedLines()<CR>
nnoremap <Leader>H :call clearmatches()<CR>

" Commented vim-fugitive mappings
" nnoremap <leader>gs :G<CR>
" nnoremap <leader>gc :Git commit<CR>
" nnoremap <leader>gl :Git log<CR>
" nnoremap <leader>gk :diffget //3<CR>
" nnoremap <leader>gj :diffget //2<CR>

" ===========================================
" AUTOCMDS & FILE TYPES
" ===========================================

" Bash files
autocmd BufNewFile *.sh 0r ~/.vim/templates/template.sh | :2

" Python files
autocmd BufNewFile *.py 0r ~/.vim/templates/template.py | :2

" JSON files
autocmd BufRead,BufNewFile *.json set cursorline!

" ===========================================
" CUSTOM FUNCTIONS
" ===========================================

" Template functions
function BashTemp()
   :read ~/.vim/templates/template.sh
endfunction

function PyTemp()
   :read ~/.vim/templates/template.py
endfunction

" JSON formatting
function Json()
	:silent! %s/None/null/g
	:silent! %s/True/true/g
	:silent! %s/False/false/g
	:silent! %s/'/"/g
	:silent! %!python -mjson.tool
endfunction

" Search function
function Search(param_1, param_2)
    exec 'vimgrep /\<' . a:param_1 . '\>/j **/*.' . a:param_2
    " exec 'vimgrep /'.a:param_1.'/j **/*.'.a:param_2 
    copen
    wincmd J
    resize 30
endfunction
command! -nargs=* Search call Search(<f-args>)

" Utility functions
function Clear()
   :1,$d
endfunction

function OpenAllFilesFromDir(dir)
    exec 'argadd '.a:dir.'/* | tab all'
endfunction
command! -complete=file_in_path -nargs=+ T call OpenAllFilesFromDir(<f-args>)

" Highlighting function
function! HighlightSelectedLines()
    let l:cursor_pos = getpos(".")
    let l:start_line = line("'<")
    let l:end_line = line("'>")
    
    for l:line_number in range(l:start_line, l:end_line)
        call matchadd('Visual', '\%'.l:line_number.'l')
    endfor
    
    call setpos('.', l:cursor_pos)
endfunction

" Find and replace function
function FindAndReplaceAll(source, target)
    exe silent! '%s/' . a:source . '/' . a:target . '/g'
endfunction

" Black formatter
command! Black execute '!black %'

" ===========================================
" THEME & UI
" ===========================================
set termguicolors
set t_Co=256
set cursorline
colorscheme nord
set background=dark

" Alternative PaperColor theme (commented)
" set termguicolors
" set t_Co=256
" set cursorline
" set background=light
" colorscheme PaperColor
" let g:lightline = {'colorscheme': 'PaperColor',}

" Debug syntax highlighting: so $VIMRUNTIME/syntax/hitest.vim
